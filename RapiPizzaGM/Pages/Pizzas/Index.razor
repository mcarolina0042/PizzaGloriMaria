@page "/pizzas"
@using RapiPizzaGM.Data.Models
@using RapiPizzaGM.Data.Request
@using RapiPizzaGM.Data.Response
@using RapiPizzaGM.Data.Services
@using Microsoft.EntityFrameworkCore

<h3 class="text-center">Lista de Pizzas (@Pizzas.Count)</h3>

<div class="mb-4">
    <button class="btn btn-success" @onclick="MostrarFormulario">
        <i class="fas fa-plus-circle"></i> Agregar Pizzas
    </button>
</div>

<div class="container" style="background-color: #f5f5f5;">
    <div class="row">
        @foreach (var pizza in Pizzas)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title text-center mb-4">@pizza.Nombre</h5>
                        <p class="text-center">Tamaño: @pizza.Tamaño</p>
                        <p class="text-center">Precio: @pizza.Precio.ToString("C2")</p>
                        <div class="text-center">
                            <div class="btn-group">
                                <button class="btn btn-warning btn-icon" @onclick="() => Seleccionar(pizza.Id)">
                                    <i class="oi oi-pencil"></i> Editar
                                </button>

                                <button class="btn btn-danger btn-icon" @onclick="()=>Eliminar(pizza.Id)">
                                    <span class="oi oi-trash"></span> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Agrega este enlace para cargar Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<style>
    /* Estilos personalizados para el formulario interactivo */

    /* Estilo para los botones con ícono */
    .btn i {
        margin-right: 5px;
    }

    /* Estilo para el formulario */
    .card {
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    /* Estilo para el título del formulario */
    .card-body .form-label {
        font-size: 1.2rem;
        font-weight: bold;
    }

    /* Estilo para los campos de entrada */
    .form-control {
        height: 45px;
        font-size: 1rem;
    }

    /* Estilo para los botones de acción */
    .btn-outline-success,
    .btn-outline-danger {
        width: 150px;
        margin: 10px;
        font-size: 1rem;
        transition: filter 0.3s ease-in-out;
    }

        .btn-outline-success:hover,
        .btn-outline-danger:hover {
            filter: brightness(110%);
        }

    /* Estilo para el contenedor principal */
    .container {
        padding: 20px;
    }

    /* Estilo para los botones con ícono */
    .btn i {
        margin-right: 5px;
    }
</style>


@if (ShowForm)
{
    <div class="row mt-3">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    @if (request.Id == 0)
                    {
                        <h5 class="card-title">Agregar Nueva Pizza</h5>
                    }
                    else
                    {
                        <h5 class="card-title">Editar Pizza</h5>
                    }
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <input @bind="request.Nombre" type="text" class="form-control" id="nombre">
                    </div>
                    <div class="mb-3">
                        <label for="Tamano" class="form-label">Tamaño</label>
                        <input @bind="request.Tamaño" type="text" class="form-control" id="Tamano">
                    </div>
                    <div class="mb-3">
                        <label for="precio" class="form-label">Precio</label>
                        <input @bind="request.Precio" type="number" step="0.01" class="form-control" id="precio">
                    </div>
                    <div class="text-center">
                        <button @onclick="Send" class="btn btn-primary">
                            <i class="fas fa-save"></i> Guardar
                        </button>
                        <button @onclick="() => ShowForm = false" class="btn btn-secondary">
                            <i class="fas fa-times"></i> Cancelar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<style>
        /* Estilos personalizados */
        .container {
            padding: 20px;
            border-radius: 5px; /* Añadimos bordes redondeados */
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Añadimos una sombra suave */
            background-color: #f5f5f5; /* Color de fondo gris claro */
        }

        .card {
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease-in-out;
        }

            .card:hover {
                transform: scale(1.05);
            }

        .card-title {
            font-size: 1.2rem;
            font-weight: bold;
        }

        .btn-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 35px; /* Reducimos la altura de los botones */
            font-size: 1rem; /* Ajustamos el tamaño del texto */
        }

        .btn-warning {
            background-color: #ffc107;
            color: #fff;
            border-color: #ffc107;
        }

        .btn-danger {
            background-color: #dc3545;
            color: #fff;
            border-color: #dc3545;
        }

            .btn-warning:hover,
            .btn-danger:hover {
                filter: brightness(110%);
            }
    </style>



<!-- Asegúrate de haber agregado el enlace de Font Awesome en _Host.cshtml o index.html -->

<style>
    /* Estilos personalizados */
    .container {
        padding: 20px;
    }

    .mb-2 {
        margin-bottom: 20px;
    }

    .input-group label {
        margin-right: 10px;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .card-title {
        font-size: 1.2rem;
        font-weight: bold;
    }

    .btn-group {
        margin-top: 10px;
    }
</style>

@code {
    
    protected override async Task OnInitializedAsync()
    {
        await CargarPizzas();
    }
    public bool ShowForm { get; set; } = false;
    public string Filtro { get; set; } = "";

    public List<PizzaResponse> Pizzas { get; set; } = new List<PizzaResponse>();

    public PizzaRequest request { get; set; } = new PizzaRequest();

    

    async Task CargarPizzas()
    {
        var resultado = await PizzaServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Pizzas = resultado.Data!;
        }
        else
        {
            // Aquí puedes mostrar un mensaje de error si lo deseas.
        }
    }

    public async Task Send()
    {
        if (request.Id == 0)
        {
            var r = await PizzaServices.Crear(request);
            if (r.Success)
            {
                await CargarPizzas();
                ShowForm = false;
                StateHasChanged();
            }
            else
            {
                // Aquí puedes mostrar un mensaje de error si lo deseas.
            }
        }
        else
        {
            var r = await PizzaServices.Modificar(request);
            if (r.Success)
            {
                await CargarPizzas();
                ShowForm = false;
                StateHasChanged();
            }
            else
            {
                // Aquí puedes mostrar un mensaje de error si lo deseas.
            }
        }
    }

    public async Task Eliminar(int id)
    {
        
        var request = new PizzaRequest { Id = id };

        var r = await PizzaServices.Eliminar(request);
        if (r.Success)
        {
            await CargarPizzas();
        }
        else
        {
            // Aquí puedes mostrar un mensaje de error si lo deseas.
        }
    }

    public void MostrarFormulario()
    {
        ShowForm = true;
        request = new PizzaRequest();
    }

    public async Task Seleccionar(int id)
    {
        var pizza = Pizzas.FirstOrDefault(p => p.Id == id);
        if (pizza != null)
        {
            ShowForm = true;
            request = pizza.ToRequest();
        }
    }
}
